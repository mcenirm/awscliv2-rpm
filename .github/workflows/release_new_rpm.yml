name: Release new RPM

on:
  workflow_dispatch:
    inputs:
      force:
        description: 'Rebuild rpm even if installer has not changed'
        required: true
        default: false
        type: boolean
  schedule:
    - cron: "15 18 * * *"

jobs:
  all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure git for commit
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "${GITHUB_REPOSITORY//\//+}+${GITHUB_WORKFLOW// /-}@github.io"
          if [ -n "$GITHUB_BASE_REF" ]
          then
            echo "BASE_REF=$GITHUB_BASE_REF" >> $GITHUB_ENV
          else
            echo "BASE_REF=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi

      - name: Check for new installer
        run: |
          git rm -q -f --ignore-unmatch -- *.version
          ./check_for_new_installer | xargs --no-run-if-empty git add

      - name: Rebuild spec file, etc.
        run: |
          ./respecit | xargs --no-run-if-empty git add
          echo "AWS_CLI_VERSION=$(cat aws-cli.version)" >> $GITHUB_ENV
          echo "AWSCLIV2_RPM_RELEASE=$(cat awscliv2-rpm.release)" >> $GITHUB_ENV
          echo "AWSCLIV2_RPM_DISTRO=$(cat awscliv2-rpm.distro)" >> $GITHUB_ENV

      - name: Check for changes to commit
        id: check_for_changes
        run: |
          if ! git diff --cached --name-status --exit-code
          then
            echo "installer_has_changed=yes" >> $GITHUB_OUTPUT
          fi

      - name: Push updated installer details
        if: ${{ 'yes' == steps.check_for_changes.outputs.installer_has_changed }}
        id: commit_changes
        run: |
          git commit --file awscliv2-rpm-details.txt
          git push

      - name: Build builder image
        if: ${{ github.event.inputs.force || 'skipped' != steps.commit_changes.conclusion }}
        id: build_image
        run: docker compose build superbuilder

      - name: Build RPM
        if: ${{ 'skipped' != steps.build_image.conclusion }}
        id: build_rpm
        run: |
          docker compose run superbuilder ./rebuildit
          srpm_path=$(find SRPMS -type f -name '*.rpm' | head -n1)
          srpm_name=$(basename "$srpm_path")
          rpm_path=$(find RPMS -type f -name '*.rpm' | head -n1)
          rpm_name=$(basename "$rpm_path")
          echo ======================================
          declare -p {s,}rpm_{path,name}
          echo ======================================
          echo "srpm_path=$srpm_path" >> $GITHUB_OUTPUT
          echo "srpm_name=$srpm_name" >> $GITHUB_OUTPUT
          echo "rpm_path=$rpm_path" >> $GITHUB_OUTPUT
          echo "rpm_name=$rpm_name" >> $GITHUB_OUTPUT

      - name: Test RPM
        if: ${{ 'skipped' != steps.build_rpm.conclusion }}
        id: test_rpm
        run: docker compose run tester ./retestit

      - name: Save bad RPMs
        if: ${{ 'failure' == steps.test_rpm.conclusion }}
        uses: actions/upload-artifact@v4
        with:
          name: rpms
          path: "*RPMS**/*.rpm"
          if-no-files-found: error

      - name: Tag for release
        if: ${{ 'skipped' != steps.test_rpm.conclusion }}
        id: tag_for_release
        run: |
          tag=v${AWS_CLI_VERSION}-${AWSCLIV2_RPM_RELEASE}.${AWSCLIV2_RPM_DISTRO}
          echo "tag=$tag" >> $GITHUB_OUTPUT
          git fetch -v --all --prune --prune-tags
          git checkout "$BASE_REF"
          git pull --ff-only
          git tag -a -F awscliv2-rpm-details.txt "$tag"
          git push --tags

      - name: Create release
        if: ${{ 'skipped' != steps.tag_for_release.conclusion }}
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag_for_release.outputs.tag }}
          release_name: Release ${{ steps.tag_for_release.outputs.tag }}
          body_path: awscliv2-rpm-details.txt

      - name: Upload SRPM to release
        if: ${{ 'skipped' != steps.create_release.conclusion }}
        id: upload-srpm-to-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build_rpm.outputs.srpm_path }}
          asset_name: ${{ steps.build_rpm.outputs.srpm_name }}
          asset_content_type: application/x-rpm

      - name: Upload RPM to release
        if: ${{ 'skipped' != steps.create_release.conclusion }}
        id: upload-rpm-to-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build_rpm.outputs.rpm_path }}
          asset_name: ${{ steps.build_rpm.outputs.rpm_name }}
          asset_content_type: application/x-rpm
